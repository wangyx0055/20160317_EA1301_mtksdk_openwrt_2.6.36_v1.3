Index: luci-mtk/modules/admin-full/luasrc/model/cbi/admin_network/wifi.lua
===================================================================
--- luci-mtk.orig/modules/admin-full/luasrc/model/cbi/admin_network/wifi.lua
+++ luci-mtk/modules/admin-full/luasrc/model/cbi/admin_network/wifi.lua
@@ -61,7 +61,7 @@ function m.parse(map)
 		wdev:set("disabled", nil)
 
 		nw:commit("wireless")
-		luci.sys.call("(env -i /bin/ubus call network reload) >/dev/null 2>/dev/null")
+		luci.sys.call("(env -i /sbin/wifi down; env -i /sbin/wifi up) >/dev/null 2>/dev/null")
 
 		luci.http.redirect(luci.dispatcher.build_url("admin/network/wireless", arg[1]))
 		return
@@ -143,6 +143,7 @@ end
 
 
 local hwtype = wdev:get("type")
+local vendor = wdev:get("vendor")
 local htcaps = wdev:get("ht_capab") and true or false
 
 -- NanoFoo
@@ -173,6 +174,74 @@ else
 	end
 end
 
+bw = s:taboption("general", ListValue, "bw", translate("Band Width"))
+bw:value("0", translate("20MHz"))
+bw:value("1", translate("40MHz"))
+bw:value("2", translate("80MHz (only for 5G)"))
+
+----------------- MTK Device ------------------
+
+if vendor == "ralink" then
+
+--	mode = s:taboption("advanced", ListValue, "hwmode", translate("Mode"))
+--	mode:value("", translate("auto"))
+--	if hw_modes.b then mode:value("11b", "802.11b") end
+--	if hw_modes.g then mode:value("11g", "802.11g") end
+--	if hw_modes.a then mode:value("11a", "802.11a") end
+
+	if htcaps then
+		if hw_modes.g and hw_modes.n then mode:value("11ng", "802.11g+n") end
+		if hw_modes.a and hw_modes.n then mode:value("11na", "802.11a+n") end
+
+		htmode = s:taboption("advanced", ListValue, "htmode", translate("HT mode"))
+		htmode:depends("hwmode", "11na")
+		htmode:depends("hwmode", "11ng")
+		htmode:value("HT20", "20MHz")
+		htmode:value("HT40-", translate("40MHz 2nd channel below"))
+		htmode:value("HT40+", translate("40MHz 2nd channel above"))
+
+		noscan = s:taboption("advanced", Flag, "noscan", translate("Force 40MHz mode"),
+			translate("Always use 40MHz channels even if the secondary channel overlaps. Using this option does not comply with IEEE 802.11n-2009!"))
+		noscan:depends("htmode", "HT40+")
+		noscan:depends("htmode", "HT40-")
+		noscan.default = noscan.disabled
+
+		--htcapab = s:taboption("advanced", DynamicList, "ht_capab", translate("HT capabilities"))
+		--htcapab:depends("hwmode", "11na")
+		--htcapab:depends("hwmode", "11ng")
+	end
+
+--	local cl = iw and iw.countrylist
+--	if cl and #cl > 0 then
+--		cc = s:taboption("advanced", ListValue, "country", translate("Country Code"), translate("Use ISO/IEC 3166 alpha2 country codes."))
+--		cc.default = tostring(iw and iw.country or "00")
+--		for _, c in ipairs(cl) do
+--			cc:value(c.alpha2, "%s - %s" %{ c.alpha2, c.name })
+--		end
+--	else
+--		s:taboption("advanced", Value, "country", translate("Country Code"), translate("Use ISO/IEC 3166 alpha2 country codes."))
+--	end
+
+--	s:taboption("advanced", Value, "distance", translate("Distance Optimization"),
+--		translate("Distance to farthest network member in meters."))
+
+-- external antenna profiles
+--	local eal = iw and iw.extant
+--	if eal and #eal > 0 then
+--		ea = s:taboption("advanced", ListValue, "extant", translate("Antenna Configuration"))
+--		for _, eap in ipairs(eal) do
+--			ea:value(eap.id, "%s (%s)" %{ eap.name, eap.description })
+--			if eap.selected then
+--				ea.default = eap.id
+--			end
+--		end
+--	end
+
+--	s:taboption("advanced", Value, "frag", translate("Fragmentation Threshold"))
+--	s:taboption("advanced", Value, "rts", translate("RTS/CTS Threshold"))
+end
+
+
 ------------------- MAC80211 Device ------------------
 
 if hwtype == "mac80211" then
@@ -391,13 +460,14 @@ s:tab("encryption", translate("Wireless 
 s:tab("macfilter", translate("MAC-Filter"))
 s:tab("advanced", translate("Advanced Settings"))
 
-s:taboption("general", Value, "ssid", translate("<abbr title=\"Extended Service Set Identifier\">ESSID</abbr>"))
+xessid=s:taboption("general", Value, "ssid", translate("<abbr title=\"Extended Service Set Identifier\">ESSID</abbr>"))
+xessid.datatype="maxlength(32)"
 
 mode = s:taboption("general", ListValue, "mode", translate("Mode"))
 mode.override_values = true
 mode:value("ap", translate("Access Point"))
-mode:value("sta", translate("Client"))
-mode:value("adhoc", translate("Ad-Hoc"))
+-- mode:value("sta", translate("Client"))
+-- mode:value("adhoc", translate("Ad-Hoc"))
 
 bssid = s:taboption("general", Value, "bssid", translate("<abbr title=\"Basic Service Set Identifier\">BSSID</abbr>"))
 
@@ -440,6 +510,72 @@ function network.write(self, section, va
 	end
 end
 
+
+------------------ MTK Interface ----------------------
+
+if vendor == "ralink" then
+--	if fs.access("/usr/sbin/iw") then
+--		mode:value("mesh", "802.11s")
+--	end
+
+--	mode:value("ahdemo", translate("Pseudo Ad-Hoc (ahdemo)"))
+--	mode:value("monitor", translate("Monitor"))
+	bssid:depends({mode="adhoc"})
+	bssid:depends({mode="sta"})
+	bssid:depends({mode="sta-wds"})
+
+--	mp = s:taboption("macfilter", ListValue, "macfilter", translate("MAC-Address Filter"))
+--	mp:depends({mode="ap"})
+--	mp:depends({mode="ap-wds"})
+--	mp:value("", translate("disable"))
+--	mp:value("allow", translate("Allow listed only"))
+--	mp:value("deny", translate("Allow all except listed"))
+
+--	ml = s:taboption("macfilter", DynamicList, "maclist", translate("MAC-List"))
+--	ml.datatype = "macaddr"
+--	ml:depends({macfilter="allow"})
+--	ml:depends({macfilter="deny"})
+--	nt.mac_hints(function(mac, name) ml:value(mac, "%s (%s)" %{ mac, name }) end)
+
+--	mode:value("ap-wds", "%s (%s)" % {translate("Access Point"), translate("WDS")})
+--	mode:value("sta-wds", "%s (%s)" % {translate("Client"), translate("WDS")})
+
+	function mode.write(self, section, value)
+		if value == "ap-wds" then
+			ListValue.write(self, section, "ap")
+			m.uci:set("wireless", section, "wds", 1)
+		elseif value == "sta-wds" then
+			ListValue.write(self, section, "sta")
+			m.uci:set("wireless", section, "wds", 1)
+		else
+			ListValue.write(self, section, value)
+			m.uci:delete("wireless", section, "wds")
+		end
+	end
+
+	function mode.cfgvalue(self, section)
+		local mode = ListValue.cfgvalue(self, section)
+		local wds  = m.uci:get("wireless", section, "wds") == "1"
+
+		if mode == "ap" and wds then
+			return "ap-wds"
+		elseif mode == "sta" and wds then
+			return "sta-wds"
+		else
+			return mode
+		end
+	end
+
+--	hidden = s:taboption("general", Flag, "hidden", translate("Hide <abbr title=\"Extended Service Set Identifier\">ESSID</abbr>"))
+--	hidden:depends({mode="ap"})
+--	hidden:depends({mode="ap-wds"})
+
+--	wmm = s:taboption("general", Flag, "wmm", translate("WMM Mode"))
+--	wmm:depends({mode="ap"})
+--	wmm:depends({mode="ap-wds"})
+--	wmm.default = wmm.enabled
+end
+
 -------------------- MAC80211 Interface ----------------------
 
 if hwtype == "mac80211" then
@@ -671,7 +807,7 @@ cipher:depends({encryption="psk"})
 cipher:depends({encryption="psk2"})
 cipher:depends({encryption="wpa-mixed"})
 cipher:depends({encryption="psk-mixed"})
-cipher:value("auto", translate("auto"))
+-- cipher:value("auto", translate("auto"))
 cipher:value("ccmp", translate("Force CCMP (AES)"))
 cipher:value("tkip", translate("Force TKIP"))
 cipher:value("tkip+ccmp", translate("Force TKIP and CCMP (AES)"))
@@ -720,7 +856,7 @@ encr:value("none", "No Encryption")
 encr:value("wep-open",   translate("WEP Open System"), {mode="ap"}, {mode="sta"}, {mode="ap-wds"}, {mode="sta-wds"}, {mode="adhoc"}, {mode="ahdemo"}, {mode="wds"})
 encr:value("wep-shared", translate("WEP Shared Key"),  {mode="ap"}, {mode="sta"}, {mode="ap-wds"}, {mode="sta-wds"}, {mode="adhoc"}, {mode="ahdemo"}, {mode="wds"})
 
-if hwtype == "atheros" or hwtype == "mac80211" or hwtype == "prism2" then
+if hwtype == "atheros" or vendor == "ralink" or hwtype == "mac80211" or hwtype == "prism2" then
 	local supplicant = fs.access("/usr/sbin/wpa_supplicant")
 	local hostapd = fs.access("/usr/sbin/hostapd")
 
@@ -732,10 +868,10 @@ if hwtype == "atheros" or hwtype == "mac
 		encr:value("psk", "WPA-PSK", {mode="ap"}, {mode="sta"}, {mode="ap-wds"}, {mode="sta-wds"})
 		encr:value("psk2", "WPA2-PSK", {mode="ap"}, {mode="sta"}, {mode="ap-wds"}, {mode="sta-wds"})
 		encr:value("psk-mixed", "WPA-PSK/WPA2-PSK Mixed Mode", {mode="ap"}, {mode="sta"}, {mode="ap-wds"}, {mode="sta-wds"})
-		if has_ap_eap and has_sta_eap then
+		-- if has_ap_eap and has_sta_eap then
 			encr:value("wpa", "WPA-EAP", {mode="ap"}, {mode="sta"}, {mode="ap-wds"}, {mode="sta-wds"})
 			encr:value("wpa2", "WPA2-EAP", {mode="ap"}, {mode="sta"}, {mode="ap-wds"}, {mode="sta-wds"})
-		end
+		-- end
 	elseif hostapd and not supplicant then
 		encr:value("psk", "WPA-PSK", {mode="ap"}, {mode="ap-wds"})
 		encr:value("psk2", "WPA2-PSK", {mode="ap"}, {mode="ap-wds"})
@@ -756,10 +892,10 @@ if hwtype == "atheros" or hwtype == "mac
 			encr:value("wpa", "WPA-EAP", {mode="sta"}, {mode="sta-wds"})
 			encr:value("wpa2", "WPA2-EAP", {mode="sta"}, {mode="sta-wds"})
 		end
-		encr.description = translate(
-			"WPA-Encryption requires wpa_supplicant (for client mode) or hostapd (for AP " ..
-			"and ad-hoc mode) to be installed."
-		)
+		-- encr.description = translate(
+		--	"WPA-Encryption requires wpa_supplicant (for client mode) or hostapd (for AP " ..
+		--	"and ad-hoc mode) to be installed."
+		-- )
 	else
 		encr.description = translate(
 			"WPA-Encryption requires wpa_supplicant (for client mode) or hostapd (for AP " ..
@@ -881,7 +1017,7 @@ for slot=1,4 do
 end
 
 
-if hwtype == "atheros" or hwtype == "mac80211" or hwtype == "prism2" then
+if hwtype == "atheros" or vendor == "ralink" or hwtype == "mac80211" or hwtype == "prism2" then
 	nasid = s:taboption("encryption", Value, "nasid", translate("NAS ID"))
 	nasid:depends({mode="ap", encryption="wpa"})
 	nasid:depends({mode="ap", encryption="wpa2"})
